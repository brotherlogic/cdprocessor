// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// CDProcessorClient is the client API for CDProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CDProcessorClient interface {
	GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error)
	GetMissing(ctx context.Context, in *GetMissingRequest, opts ...grpc.CallOption) (*GetMissingResponse, error)
	Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*ForceResponse, error)
}

type cDProcessorClient struct {
	cc grpc.ClientConnInterface
}

func NewCDProcessorClient(cc grpc.ClientConnInterface) CDProcessorClient {
	return &cDProcessorClient{cc}
}

func (c *cDProcessorClient) GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error) {
	out := new(GetRippedResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/GetRipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDProcessorClient) GetMissing(ctx context.Context, in *GetMissingRequest, opts ...grpc.CallOption) (*GetMissingResponse, error) {
	out := new(GetMissingResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/GetMissing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDProcessorClient) Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*ForceResponse, error) {
	out := new(ForceResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/Force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDProcessorServer is the server API for CDProcessor service.
// All implementations should embed UnimplementedCDProcessorServer
// for forward compatibility
type CDProcessorServer interface {
	GetRipped(context.Context, *GetRippedRequest) (*GetRippedResponse, error)
	GetMissing(context.Context, *GetMissingRequest) (*GetMissingResponse, error)
	Force(context.Context, *ForceRequest) (*ForceResponse, error)
}

// UnimplementedCDProcessorServer should be embedded to have forward compatible implementations.
type UnimplementedCDProcessorServer struct {
}

func (UnimplementedCDProcessorServer) GetRipped(context.Context, *GetRippedRequest) (*GetRippedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRipped not implemented")
}
func (UnimplementedCDProcessorServer) GetMissing(context.Context, *GetMissingRequest) (*GetMissingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMissing not implemented")
}
func (UnimplementedCDProcessorServer) Force(context.Context, *ForceRequest) (*ForceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Force not implemented")
}

// UnsafeCDProcessorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CDProcessorServer will
// result in compilation errors.
type UnsafeCDProcessorServer interface {
	mustEmbedUnimplementedCDProcessorServer()
}

func RegisterCDProcessorServer(s grpc.ServiceRegistrar, srv CDProcessorServer) {
	s.RegisterService(&_CDProcessor_serviceDesc, srv)
}

func _CDProcessor_GetRipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).GetRipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/GetRipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).GetRipped(ctx, req.(*GetRippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDProcessor_GetMissing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).GetMissing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/GetMissing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).GetMissing(ctx, req.(*GetMissingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDProcessor_Force_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).Force(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/Force",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).Force(ctx, req.(*ForceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cdprocessor.CDProcessor",
	HandlerType: (*CDProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRipped",
			Handler:    _CDProcessor_GetRipped_Handler,
		},
		{
			MethodName: "GetMissing",
			Handler:    _CDProcessor_GetMissing_Handler,
		},
		{
			MethodName: "Force",
			Handler:    _CDProcessor_Force_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdprocessor.proto",
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdprocessor.proto

package cdprocessor

import (
	fmt "fmt"
	proto1 "github.com/brotherlogic/recordcollection/proto"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ForceRequest_ForceType int32

const (
	ForceRequest_UNKNOWN        ForceRequest_ForceType = 0
	ForceRequest_RECREATE_LINKS ForceRequest_ForceType = 1
)

var ForceRequest_ForceType_name = map[int32]string{
	0: "UNKNOWN",
	1: "RECREATE_LINKS",
}

var ForceRequest_ForceType_value = map[string]int32{
	"UNKNOWN":        0,
	"RECREATE_LINKS": 1,
}

func (x ForceRequest_ForceType) String() string {
	return proto.EnumName(ForceRequest_ForceType_name, int32(x))
}

func (ForceRequest_ForceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{6, 0}
}

type GetRippedRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRippedRequest) Reset()         { *m = GetRippedRequest{} }
func (m *GetRippedRequest) String() string { return proto.CompactTextString(m) }
func (*GetRippedRequest) ProtoMessage()    {}
func (*GetRippedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{0}
}

func (m *GetRippedRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRippedRequest.Unmarshal(m, b)
}
func (m *GetRippedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRippedRequest.Marshal(b, m, deterministic)
}
func (m *GetRippedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRippedRequest.Merge(m, src)
}
func (m *GetRippedRequest) XXX_Size() int {
	return xxx_messageInfo_GetRippedRequest.Size(m)
}
func (m *GetRippedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRippedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetRippedRequest proto.InternalMessageInfo

type Track struct {
	Disk                 int32    `protobuf:"varint,5,opt,name=disk,proto3" json:"disk,omitempty"`
	TrackNumber          int32    `protobuf:"varint,1,opt,name=track_number,json=trackNumber,proto3" json:"track_number,omitempty"`
	WavPath              string   `protobuf:"bytes,2,opt,name=wav_path,json=wavPath,proto3" json:"wav_path,omitempty"`
	Mp3Path              string   `protobuf:"bytes,3,opt,name=mp3_path,json=mp3Path,proto3" json:"mp3_path,omitempty"`
	FlacPath             string   `protobuf:"bytes,4,opt,name=flac_path,json=flacPath,proto3" json:"flac_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Track) Reset()         { *m = Track{} }
func (m *Track) String() string { return proto.CompactTextString(m) }
func (*Track) ProtoMessage()    {}
func (*Track) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{1}
}

func (m *Track) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Track.Unmarshal(m, b)
}
func (m *Track) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Track.Marshal(b, m, deterministic)
}
func (m *Track) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Track.Merge(m, src)
}
func (m *Track) XXX_Size() int {
	return xxx_messageInfo_Track.Size(m)
}
func (m *Track) XXX_DiscardUnknown() {
	xxx_messageInfo_Track.DiscardUnknown(m)
}

var xxx_messageInfo_Track proto.InternalMessageInfo

func (m *Track) GetDisk() int32 {
	if m != nil {
		return m.Disk
	}
	return 0
}

func (m *Track) GetTrackNumber() int32 {
	if m != nil {
		return m.TrackNumber
	}
	return 0
}

func (m *Track) GetWavPath() string {
	if m != nil {
		return m.WavPath
	}
	return ""
}

func (m *Track) GetMp3Path() string {
	if m != nil {
		return m.Mp3Path
	}
	return ""
}

func (m *Track) GetFlacPath() string {
	if m != nil {
		return m.FlacPath
	}
	return ""
}

type Rip struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path                 string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Tracks               []*Track `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Rip) Reset()         { *m = Rip{} }
func (m *Rip) String() string { return proto.CompactTextString(m) }
func (*Rip) ProtoMessage()    {}
func (*Rip) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{2}
}

func (m *Rip) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Rip.Unmarshal(m, b)
}
func (m *Rip) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Rip.Marshal(b, m, deterministic)
}
func (m *Rip) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Rip.Merge(m, src)
}
func (m *Rip) XXX_Size() int {
	return xxx_messageInfo_Rip.Size(m)
}
func (m *Rip) XXX_DiscardUnknown() {
	xxx_messageInfo_Rip.DiscardUnknown(m)
}

var xxx_messageInfo_Rip proto.InternalMessageInfo

func (m *Rip) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Rip) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *Rip) GetTracks() []*Track {
	if m != nil {
		return m.Tracks
	}
	return nil
}

type GetRippedResponse struct {
	Ripped               []*Rip   `protobuf:"bytes,1,rep,name=ripped,proto3" json:"ripped,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRippedResponse) Reset()         { *m = GetRippedResponse{} }
func (m *GetRippedResponse) String() string { return proto.CompactTextString(m) }
func (*GetRippedResponse) ProtoMessage()    {}
func (*GetRippedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{3}
}

func (m *GetRippedResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRippedResponse.Unmarshal(m, b)
}
func (m *GetRippedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRippedResponse.Marshal(b, m, deterministic)
}
func (m *GetRippedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRippedResponse.Merge(m, src)
}
func (m *GetRippedResponse) XXX_Size() int {
	return xxx_messageInfo_GetRippedResponse.Size(m)
}
func (m *GetRippedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRippedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetRippedResponse proto.InternalMessageInfo

func (m *GetRippedResponse) GetRipped() []*Rip {
	if m != nil {
		return m.Ripped
	}
	return nil
}

type GetMissingRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetMissingRequest) Reset()         { *m = GetMissingRequest{} }
func (m *GetMissingRequest) String() string { return proto.CompactTextString(m) }
func (*GetMissingRequest) ProtoMessage()    {}
func (*GetMissingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{4}
}

func (m *GetMissingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMissingRequest.Unmarshal(m, b)
}
func (m *GetMissingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMissingRequest.Marshal(b, m, deterministic)
}
func (m *GetMissingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissingRequest.Merge(m, src)
}
func (m *GetMissingRequest) XXX_Size() int {
	return xxx_messageInfo_GetMissingRequest.Size(m)
}
func (m *GetMissingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissingRequest proto.InternalMessageInfo

type GetMissingResponse struct {
	Missing              []*proto1.Record `protobuf:"bytes,1,rep,name=missing,proto3" json:"missing,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *GetMissingResponse) Reset()         { *m = GetMissingResponse{} }
func (m *GetMissingResponse) String() string { return proto.CompactTextString(m) }
func (*GetMissingResponse) ProtoMessage()    {}
func (*GetMissingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{5}
}

func (m *GetMissingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetMissingResponse.Unmarshal(m, b)
}
func (m *GetMissingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetMissingResponse.Marshal(b, m, deterministic)
}
func (m *GetMissingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetMissingResponse.Merge(m, src)
}
func (m *GetMissingResponse) XXX_Size() int {
	return xxx_messageInfo_GetMissingResponse.Size(m)
}
func (m *GetMissingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetMissingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetMissingResponse proto.InternalMessageInfo

func (m *GetMissingResponse) GetMissing() []*proto1.Record {
	if m != nil {
		return m.Missing
	}
	return nil
}

type ForceRequest struct {
	Type                 ForceRequest_ForceType `protobuf:"varint,1,opt,name=type,proto3,enum=cdprocessor.ForceRequest_ForceType" json:"type,omitempty"`
	Id                   int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *ForceRequest) Reset()         { *m = ForceRequest{} }
func (m *ForceRequest) String() string { return proto.CompactTextString(m) }
func (*ForceRequest) ProtoMessage()    {}
func (*ForceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{6}
}

func (m *ForceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForceRequest.Unmarshal(m, b)
}
func (m *ForceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForceRequest.Marshal(b, m, deterministic)
}
func (m *ForceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceRequest.Merge(m, src)
}
func (m *ForceRequest) XXX_Size() int {
	return xxx_messageInfo_ForceRequest.Size(m)
}
func (m *ForceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ForceRequest proto.InternalMessageInfo

func (m *ForceRequest) GetType() ForceRequest_ForceType {
	if m != nil {
		return m.Type
	}
	return ForceRequest_UNKNOWN
}

func (m *ForceRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type ForceResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ForceResponse) Reset()         { *m = ForceResponse{} }
func (m *ForceResponse) String() string { return proto.CompactTextString(m) }
func (*ForceResponse) ProtoMessage()    {}
func (*ForceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f8eb0231462381e4, []int{7}
}

func (m *ForceResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ForceResponse.Unmarshal(m, b)
}
func (m *ForceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ForceResponse.Marshal(b, m, deterministic)
}
func (m *ForceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ForceResponse.Merge(m, src)
}
func (m *ForceResponse) XXX_Size() int {
	return xxx_messageInfo_ForceResponse.Size(m)
}
func (m *ForceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ForceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ForceResponse proto.InternalMessageInfo

func init() {
	proto.RegisterEnum("cdprocessor.ForceRequest_ForceType", ForceRequest_ForceType_name, ForceRequest_ForceType_value)
	proto.RegisterType((*GetRippedRequest)(nil), "cdprocessor.GetRippedRequest")
	proto.RegisterType((*Track)(nil), "cdprocessor.Track")
	proto.RegisterType((*Rip)(nil), "cdprocessor.Rip")
	proto.RegisterType((*GetRippedResponse)(nil), "cdprocessor.GetRippedResponse")
	proto.RegisterType((*GetMissingRequest)(nil), "cdprocessor.GetMissingRequest")
	proto.RegisterType((*GetMissingResponse)(nil), "cdprocessor.GetMissingResponse")
	proto.RegisterType((*ForceRequest)(nil), "cdprocessor.ForceRequest")
	proto.RegisterType((*ForceResponse)(nil), "cdprocessor.ForceResponse")
}

func init() { proto.RegisterFile("cdprocessor.proto", fileDescriptor_f8eb0231462381e4) }

var fileDescriptor_f8eb0231462381e4 = []byte{
	// 470 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0xdf, 0x6e, 0xd3, 0x30,
	0x14, 0xc6, 0x49, 0xff, 0xae, 0x27, 0xa3, 0x74, 0x87, 0x9b, 0x2c, 0x08, 0x28, 0xe1, 0xa6, 0x42,
	0xa8, 0x95, 0xda, 0x0b, 0xae, 0x40, 0x42, 0xa3, 0xfc, 0x1b, 0x0b, 0x93, 0xe9, 0xc4, 0x65, 0x95,
	0x3a, 0xa6, 0xb5, 0xd6, 0xd4, 0xc6, 0x76, 0x37, 0xed, 0x01, 0x78, 0x00, 0xde, 0x92, 0xc7, 0x40,
	0x71, 0xdc, 0x91, 0xd2, 0xf5, 0xce, 0xf9, 0x7e, 0xe7, 0x7c, 0x3e, 0xe7, 0x4b, 0x02, 0x47, 0x34,
	0x95, 0x4a, 0x50, 0xa6, 0xb5, 0x50, 0x7d, 0xa9, 0x84, 0x11, 0xe8, 0x97, 0xa4, 0x70, 0x3c, 0xe7,
	0x66, 0xb1, 0x9e, 0xf5, 0xa9, 0xc8, 0x06, 0x33, 0x25, 0xcc, 0x82, 0xa9, 0xa5, 0x98, 0x73, 0x3a,
	0x50, 0x8c, 0x0a, 0x95, 0x52, 0xb1, 0x5c, 0x32, 0x6a, 0xb8, 0x58, 0x0d, 0x6c, 0xf3, 0x8e, 0x5c,
	0x78, 0x46, 0x08, 0x9d, 0x0f, 0xcc, 0x10, 0x2e, 0x25, 0x4b, 0x09, 0xfb, 0xb9, 0x66, 0xda, 0x44,
	0xbf, 0x3d, 0xa8, 0x4f, 0x54, 0x42, 0x2f, 0x11, 0xa1, 0x96, 0x72, 0x7d, 0x19, 0xd4, 0xbb, 0x5e,
	0xaf, 0x4e, 0xec, 0x19, 0x9f, 0xc1, 0xa1, 0xc9, 0xe1, 0x74, 0xb5, 0xce, 0x66, 0x4c, 0x05, 0x9e,
	0x65, 0xbe, 0xd5, 0x62, 0x2b, 0xe1, 0x31, 0x1c, 0x5c, 0x27, 0x57, 0x53, 0x99, 0x98, 0x45, 0x50,
	0xe9, 0x7a, 0xbd, 0x16, 0x69, 0x5e, 0x27, 0x57, 0xe7, 0x89, 0x59, 0xe4, 0x28, 0x93, 0xa3, 0x02,
	0x55, 0x0b, 0x94, 0xc9, 0x91, 0x45, 0x8f, 0xa0, 0xf5, 0x63, 0x99, 0xd0, 0x82, 0xd5, 0x2c, 0x3b,
	0xc8, 0x85, 0x1c, 0x46, 0x17, 0x50, 0x25, 0x5c, 0x62, 0x1b, 0x2a, 0x3c, 0x75, 0x57, 0x56, 0x78,
	0x9a, 0x0f, 0x58, 0xba, 0xc5, 0x9e, 0xf1, 0x05, 0x34, 0xec, 0x30, 0x3a, 0xa8, 0x76, 0xab, 0x3d,
	0x7f, 0x88, 0xfd, 0x72, 0x94, 0x76, 0x31, 0xe2, 0x2a, 0xa2, 0xd7, 0x70, 0x54, 0x5a, 0x5f, 0x4b,
	0xb1, 0xd2, 0x0c, 0x7b, 0xd0, 0x50, 0x56, 0x09, 0x3c, 0x6b, 0xd0, 0xd9, 0x32, 0x20, 0x5c, 0x12,
	0xc7, 0xa3, 0x87, 0xb6, 0xfd, 0x8c, 0x6b, 0xcd, 0x57, 0xf3, 0x4d, 0x7c, 0x1f, 0x01, 0xcb, 0xa2,
	0x33, 0x1d, 0x42, 0x33, 0x2b, 0x24, 0xe7, 0x1a, 0xf4, 0x77, 0x5e, 0x09, 0xb1, 0x02, 0xd9, 0x14,
	0x46, 0xbf, 0x3c, 0x38, 0x7c, 0x2f, 0x14, 0x65, 0xce, 0x1a, 0x5f, 0x41, 0xcd, 0xdc, 0x48, 0x66,
	0x03, 0x68, 0x0f, 0x9f, 0x6f, 0xcd, 0x55, 0x2e, 0x2c, 0x1e, 0x26, 0x37, 0x92, 0x11, 0xdb, 0xe0,
	0x72, 0xab, 0x6c, 0x72, 0x8b, 0x5e, 0x42, 0xeb, 0xb6, 0x04, 0x7d, 0x68, 0x5e, 0xc4, 0xa7, 0xf1,
	0xd7, 0xef, 0x71, 0xe7, 0x1e, 0x22, 0xb4, 0xc9, 0xf8, 0x84, 0x8c, 0xdf, 0x4e, 0xc6, 0xd3, 0x2f,
	0x9f, 0xe2, 0xd3, 0x6f, 0x1d, 0x2f, 0x7a, 0x00, 0xf7, 0x9d, 0x7b, 0xb1, 0xcc, 0xf0, 0x8f, 0x07,
	0xfe, 0xc9, 0xbb, 0xf3, 0xcd, 0xdd, 0xf8, 0x19, 0x5a, 0xb7, 0x31, 0xe2, 0xe3, 0xad, 0xb1, 0xfe,
	0xff, 0xba, 0xc2, 0x27, 0xfb, 0xb0, 0x0b, 0xea, 0x0c, 0xe0, 0x5f, 0x7c, 0xb8, 0x53, 0xbd, 0x1d,
	0x76, 0xf8, 0x74, 0x2f, 0x77, 0x76, 0x6f, 0xa0, 0x6e, 0x67, 0xc7, 0xe3, 0xbd, 0x69, 0x85, 0xe1,
	0x5d, 0xa8, 0xe8, 0x9f, 0x35, 0xec, 0x7f, 0x32, 0xfa, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xbe, 0x29,
	0x0c, 0x6e, 0x90, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// CDProcessorClient is the client API for CDProcessor service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CDProcessorClient interface {
	GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error)
	GetMissing(ctx context.Context, in *GetMissingRequest, opts ...grpc.CallOption) (*GetMissingResponse, error)
	Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*ForceResponse, error)
}

type cDProcessorClient struct {
	cc *grpc.ClientConn
}

func NewCDProcessorClient(cc *grpc.ClientConn) CDProcessorClient {
	return &cDProcessorClient{cc}
}

func (c *cDProcessorClient) GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error) {
	out := new(GetRippedResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/GetRipped", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDProcessorClient) GetMissing(ctx context.Context, in *GetMissingRequest, opts ...grpc.CallOption) (*GetMissingResponse, error) {
	out := new(GetMissingResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/GetMissing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cDProcessorClient) Force(ctx context.Context, in *ForceRequest, opts ...grpc.CallOption) (*ForceResponse, error) {
	out := new(ForceResponse)
	err := c.cc.Invoke(ctx, "/cdprocessor.CDProcessor/Force", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CDProcessorServer is the server API for CDProcessor service.
type CDProcessorServer interface {
	GetRipped(context.Context, *GetRippedRequest) (*GetRippedResponse, error)
	GetMissing(context.Context, *GetMissingRequest) (*GetMissingResponse, error)
	Force(context.Context, *ForceRequest) (*ForceResponse, error)
}

func RegisterCDProcessorServer(s *grpc.Server, srv CDProcessorServer) {
	s.RegisterService(&_CDProcessor_serviceDesc, srv)
}

func _CDProcessor_GetRipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).GetRipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/GetRipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).GetRipped(ctx, req.(*GetRippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDProcessor_GetMissing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMissingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).GetMissing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/GetMissing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).GetMissing(ctx, req.(*GetMissingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CDProcessor_Force_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ForceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).Force(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/Force",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).Force(ctx, req.(*ForceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cdprocessor.CDProcessor",
	HandlerType: (*CDProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRipped",
			Handler:    _CDProcessor_GetRipped_Handler,
		},
		{
			MethodName: "GetMissing",
			Handler:    _CDProcessor_GetMissing_Handler,
		},
		{
			MethodName: "Force",
			Handler:    _CDProcessor_Force_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdprocessor.proto",
}

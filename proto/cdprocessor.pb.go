// Code generated by protoc-gen-go. DO NOT EDIT.
// source: cdprocessor.proto

/*
Package cdprocessor is a generated protocol buffer package.

It is generated from these files:
	cdprocessor.proto

It has these top-level messages:
	GetRippedRequest
	GetRippedResponse
*/
package cdprocessor

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetRippedRequest struct {
}

func (m *GetRippedRequest) Reset()                    { *m = GetRippedRequest{} }
func (m *GetRippedRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRippedRequest) ProtoMessage()               {}
func (*GetRippedRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type GetRippedResponse struct {
	RippedIds []int32 `protobuf:"varint,1,rep,packed,name=ripped_ids,json=rippedIds" json:"ripped_ids,omitempty"`
}

func (m *GetRippedResponse) Reset()                    { *m = GetRippedResponse{} }
func (m *GetRippedResponse) String() string            { return proto.CompactTextString(m) }
func (*GetRippedResponse) ProtoMessage()               {}
func (*GetRippedResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetRippedResponse) GetRippedIds() []int32 {
	if m != nil {
		return m.RippedIds
	}
	return nil
}

func init() {
	proto.RegisterType((*GetRippedRequest)(nil), "cdprocessor.GetRippedRequest")
	proto.RegisterType((*GetRippedResponse)(nil), "cdprocessor.GetRippedResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for CDProcessor service

type CDProcessorClient interface {
	GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error)
}

type cDProcessorClient struct {
	cc *grpc.ClientConn
}

func NewCDProcessorClient(cc *grpc.ClientConn) CDProcessorClient {
	return &cDProcessorClient{cc}
}

func (c *cDProcessorClient) GetRipped(ctx context.Context, in *GetRippedRequest, opts ...grpc.CallOption) (*GetRippedResponse, error) {
	out := new(GetRippedResponse)
	err := grpc.Invoke(ctx, "/cdprocessor.CDProcessor/GetRipped", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CDProcessor service

type CDProcessorServer interface {
	GetRipped(context.Context, *GetRippedRequest) (*GetRippedResponse, error)
}

func RegisterCDProcessorServer(s *grpc.Server, srv CDProcessorServer) {
	s.RegisterService(&_CDProcessor_serviceDesc, srv)
}

func _CDProcessor_GetRipped_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRippedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CDProcessorServer).GetRipped(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/cdprocessor.CDProcessor/GetRipped",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CDProcessorServer).GetRipped(ctx, req.(*GetRippedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CDProcessor_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cdprocessor.CDProcessor",
	HandlerType: (*CDProcessorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRipped",
			Handler:    _CDProcessor_GetRipped_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cdprocessor.proto",
}

func init() { proto.RegisterFile("cdprocessor.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 137 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x4e, 0x29, 0x28,
	0xca, 0x4f, 0x4e, 0x2d, 0x2e, 0xce, 0x2f, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x46,
	0x12, 0x52, 0x12, 0xe2, 0x12, 0x70, 0x4f, 0x2d, 0x09, 0xca, 0x2c, 0x28, 0x48, 0x4d, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x32, 0xe2, 0x12, 0x44, 0x12, 0x2b, 0x2e, 0xc8, 0xcf, 0x2b,
	0x4e, 0x15, 0x92, 0xe5, 0xe2, 0x2a, 0x02, 0x8b, 0xc4, 0x67, 0xa6, 0x14, 0x4b, 0x30, 0x2a, 0x30,
	0x6b, 0xb0, 0x06, 0x71, 0x42, 0x44, 0x3c, 0x53, 0x8a, 0x8d, 0x22, 0xb9, 0xb8, 0x9d, 0x5d, 0x02,
	0x60, 0xc6, 0x0a, 0x79, 0x71, 0x71, 0xc2, 0x8d, 0x10, 0x92, 0xd5, 0x43, 0x76, 0x04, 0xba, 0x75,
	0x52, 0x72, 0xb8, 0xa4, 0x21, 0x36, 0x27, 0xb1, 0x81, 0x9d, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff,
	0xff, 0xb6, 0xbc, 0xa8, 0xa8, 0xcb, 0x00, 0x00, 0x00,
}

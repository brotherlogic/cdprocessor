// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.6.1
// source: cdprocessor.proto

package proto

import (
	proto1 "github.com/brotherlogic/recordcollection/proto"
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type ForceRequest_ForceType int32

const (
	ForceRequest_UNKNOWN        ForceRequest_ForceType = 0
	ForceRequest_RECREATE_LINKS ForceRequest_ForceType = 1
)

// Enum value maps for ForceRequest_ForceType.
var (
	ForceRequest_ForceType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RECREATE_LINKS",
	}
	ForceRequest_ForceType_value = map[string]int32{
		"UNKNOWN":        0,
		"RECREATE_LINKS": 1,
	}
)

func (x ForceRequest_ForceType) Enum() *ForceRequest_ForceType {
	p := new(ForceRequest_ForceType)
	*p = x
	return p
}

func (x ForceRequest_ForceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ForceRequest_ForceType) Descriptor() protoreflect.EnumDescriptor {
	return file_cdprocessor_proto_enumTypes[0].Descriptor()
}

func (ForceRequest_ForceType) Type() protoreflect.EnumType {
	return &file_cdprocessor_proto_enumTypes[0]
}

func (x ForceRequest_ForceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ForceRequest_ForceType.Descriptor instead.
func (ForceRequest_ForceType) EnumDescriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{7, 0}
}

type Config struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastProcessTime map[int32]int64 `protobuf:"bytes,1,rep,name=last_process_time,json=lastProcessTime,proto3" json:"last_process_time,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	IssueMapping    map[int32]int32 `protobuf:"bytes,2,rep,name=issue_mapping,json=issueMapping,proto3" json:"issue_mapping,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
}

func (x *Config) Reset() {
	*x = Config{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Config) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Config) ProtoMessage() {}

func (x *Config) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Config.ProtoReflect.Descriptor instead.
func (*Config) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{0}
}

func (x *Config) GetLastProcessTime() map[int32]int64 {
	if x != nil {
		return x.LastProcessTime
	}
	return nil
}

func (x *Config) GetIssueMapping() map[int32]int32 {
	if x != nil {
		return x.IssueMapping
	}
	return nil
}

type GetRippedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetRippedRequest) Reset() {
	*x = GetRippedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRippedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRippedRequest) ProtoMessage() {}

func (x *GetRippedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRippedRequest.ProtoReflect.Descriptor instead.
func (*GetRippedRequest) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{1}
}

type Track struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Disk        int32  `protobuf:"varint,5,opt,name=disk,proto3" json:"disk,omitempty"`
	TrackNumber int32  `protobuf:"varint,1,opt,name=track_number,json=trackNumber,proto3" json:"track_number,omitempty"`
	WavPath     string `protobuf:"bytes,2,opt,name=wav_path,json=wavPath,proto3" json:"wav_path,omitempty"`
	Mp3Path     string `protobuf:"bytes,3,opt,name=mp3_path,json=mp3Path,proto3" json:"mp3_path,omitempty"`
	FlacPath    string `protobuf:"bytes,4,opt,name=flac_path,json=flacPath,proto3" json:"flac_path,omitempty"`
}

func (x *Track) Reset() {
	*x = Track{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Track) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Track) ProtoMessage() {}

func (x *Track) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Track.ProtoReflect.Descriptor instead.
func (*Track) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{2}
}

func (x *Track) GetDisk() int32 {
	if x != nil {
		return x.Disk
	}
	return 0
}

func (x *Track) GetTrackNumber() int32 {
	if x != nil {
		return x.TrackNumber
	}
	return 0
}

func (x *Track) GetWavPath() string {
	if x != nil {
		return x.WavPath
	}
	return ""
}

func (x *Track) GetMp3Path() string {
	if x != nil {
		return x.Mp3Path
	}
	return ""
}

func (x *Track) GetFlacPath() string {
	if x != nil {
		return x.FlacPath
	}
	return ""
}

type Rip struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id     int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Path   string   `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Tracks []*Track `protobuf:"bytes,3,rep,name=tracks,proto3" json:"tracks,omitempty"`
}

func (x *Rip) Reset() {
	*x = Rip{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rip) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rip) ProtoMessage() {}

func (x *Rip) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rip.ProtoReflect.Descriptor instead.
func (*Rip) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{3}
}

func (x *Rip) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Rip) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Rip) GetTracks() []*Track {
	if x != nil {
		return x.Tracks
	}
	return nil
}

type GetRippedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ripped []*Rip `protobuf:"bytes,1,rep,name=ripped,proto3" json:"ripped,omitempty"`
}

func (x *GetRippedResponse) Reset() {
	*x = GetRippedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRippedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRippedResponse) ProtoMessage() {}

func (x *GetRippedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRippedResponse.ProtoReflect.Descriptor instead.
func (*GetRippedResponse) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{4}
}

func (x *GetRippedResponse) GetRipped() []*Rip {
	if x != nil {
		return x.Ripped
	}
	return nil
}

type GetMissingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMissingRequest) Reset() {
	*x = GetMissingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissingRequest) ProtoMessage() {}

func (x *GetMissingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissingRequest.ProtoReflect.Descriptor instead.
func (*GetMissingRequest) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{5}
}

type GetMissingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Missing []*proto1.Record `protobuf:"bytes,1,rep,name=missing,proto3" json:"missing,omitempty"`
}

func (x *GetMissingResponse) Reset() {
	*x = GetMissingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMissingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMissingResponse) ProtoMessage() {}

func (x *GetMissingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMissingResponse.ProtoReflect.Descriptor instead.
func (*GetMissingResponse) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{6}
}

func (x *GetMissingResponse) GetMissing() []*proto1.Record {
	if x != nil {
		return x.Missing
	}
	return nil
}

type ForceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type ForceRequest_ForceType `protobuf:"varint,1,opt,name=type,proto3,enum=cdprocessor.ForceRequest_ForceType" json:"type,omitempty"`
	Id   int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *ForceRequest) Reset() {
	*x = ForceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceRequest) ProtoMessage() {}

func (x *ForceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceRequest.ProtoReflect.Descriptor instead.
func (*ForceRequest) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{7}
}

func (x *ForceRequest) GetType() ForceRequest_ForceType {
	if x != nil {
		return x.Type
	}
	return ForceRequest_UNKNOWN
}

func (x *ForceRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type ForceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForceResponse) Reset() {
	*x = ForceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cdprocessor_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForceResponse) ProtoMessage() {}

func (x *ForceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cdprocessor_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForceResponse.ProtoReflect.Descriptor instead.
func (*ForceResponse) Descriptor() ([]byte, []int) {
	return file_cdprocessor_proto_rawDescGZIP(), []int{8}
}

var File_cdprocessor_proto protoreflect.FileDescriptor

var file_cdprocessor_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72,
	0x1a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f,
	0x74, 0x68, 0x65, 0x72, 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x02, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x54, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x6d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x49, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e,
	0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x69, 0x73, 0x73, 0x75, 0x65, 0x4d, 0x61, 0x70,
	0x70, 0x69, 0x6e, 0x67, 0x1a, 0x42, 0x0a, 0x14, 0x4c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x3f, 0x0a, 0x11, 0x49, 0x73, 0x73, 0x75,
	0x65, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x12, 0x0a, 0x10, 0x47, 0x65, 0x74,
	0x52, 0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x05, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x69, 0x73, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x19,
	0x0a, 0x08, 0x77, 0x61, 0x76, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x77, 0x61, 0x76, 0x50, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x6d, 0x70, 0x33,
	0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x70, 0x33,
	0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x6c, 0x61, 0x63, 0x5f, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6c, 0x61, 0x63, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x55, 0x0a, 0x03, 0x52, 0x69, 0x70, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x06,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63,
	0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x52, 0x06, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x73, 0x22, 0x3d, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x52,
	0x69, 0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a,
	0x06, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x52, 0x69, 0x70, 0x52,
	0x06, 0x72, 0x69, 0x70, 0x70, 0x65, 0x64, 0x22, 0x13, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4d, 0x69,
	0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x48, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x63, 0x6f, 0x6c, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x07, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x22, 0x85, 0x01, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73,
	0x73, 0x6f, 0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x2c, 0x0a, 0x09, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x52, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x01, 0x22, 0x0f,
	0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0xe8, 0x01, 0x0a, 0x0b, 0x43, 0x44, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x12,
	0x4a, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x1d, 0x2e, 0x63,
	0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69,
	0x70, 0x70, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x64,
	0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x69, 0x70,
	0x70, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0a, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x2e, 0x63, 0x64, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x63, 0x64, 0x70, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x46, 0x6f,
	0x72, 0x63, 0x65, 0x12, 0x19, 0x2e, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2e, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a,
	0x2e, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f, 0x72, 0x2e, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x72, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x6c, 0x6f, 0x67, 0x69, 0x63, 0x2f, 0x63, 0x64, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x6f,
	0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cdprocessor_proto_rawDescOnce sync.Once
	file_cdprocessor_proto_rawDescData = file_cdprocessor_proto_rawDesc
)

func file_cdprocessor_proto_rawDescGZIP() []byte {
	file_cdprocessor_proto_rawDescOnce.Do(func() {
		file_cdprocessor_proto_rawDescData = protoimpl.X.CompressGZIP(file_cdprocessor_proto_rawDescData)
	})
	return file_cdprocessor_proto_rawDescData
}

var file_cdprocessor_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cdprocessor_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_cdprocessor_proto_goTypes = []interface{}{
	(ForceRequest_ForceType)(0), // 0: cdprocessor.ForceRequest.ForceType
	(*Config)(nil),              // 1: cdprocessor.Config
	(*GetRippedRequest)(nil),    // 2: cdprocessor.GetRippedRequest
	(*Track)(nil),               // 3: cdprocessor.Track
	(*Rip)(nil),                 // 4: cdprocessor.Rip
	(*GetRippedResponse)(nil),   // 5: cdprocessor.GetRippedResponse
	(*GetMissingRequest)(nil),   // 6: cdprocessor.GetMissingRequest
	(*GetMissingResponse)(nil),  // 7: cdprocessor.GetMissingResponse
	(*ForceRequest)(nil),        // 8: cdprocessor.ForceRequest
	(*ForceResponse)(nil),       // 9: cdprocessor.ForceResponse
	nil,                         // 10: cdprocessor.Config.LastProcessTimeEntry
	nil,                         // 11: cdprocessor.Config.IssueMappingEntry
	(*proto1.Record)(nil),       // 12: recordcollection.Record
}
var file_cdprocessor_proto_depIdxs = []int32{
	10, // 0: cdprocessor.Config.last_process_time:type_name -> cdprocessor.Config.LastProcessTimeEntry
	11, // 1: cdprocessor.Config.issue_mapping:type_name -> cdprocessor.Config.IssueMappingEntry
	3,  // 2: cdprocessor.Rip.tracks:type_name -> cdprocessor.Track
	4,  // 3: cdprocessor.GetRippedResponse.ripped:type_name -> cdprocessor.Rip
	12, // 4: cdprocessor.GetMissingResponse.missing:type_name -> recordcollection.Record
	0,  // 5: cdprocessor.ForceRequest.type:type_name -> cdprocessor.ForceRequest.ForceType
	2,  // 6: cdprocessor.CDProcessor.GetRipped:input_type -> cdprocessor.GetRippedRequest
	6,  // 7: cdprocessor.CDProcessor.GetMissing:input_type -> cdprocessor.GetMissingRequest
	8,  // 8: cdprocessor.CDProcessor.Force:input_type -> cdprocessor.ForceRequest
	5,  // 9: cdprocessor.CDProcessor.GetRipped:output_type -> cdprocessor.GetRippedResponse
	7,  // 10: cdprocessor.CDProcessor.GetMissing:output_type -> cdprocessor.GetMissingResponse
	9,  // 11: cdprocessor.CDProcessor.Force:output_type -> cdprocessor.ForceResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_cdprocessor_proto_init() }
func file_cdprocessor_proto_init() {
	if File_cdprocessor_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cdprocessor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Config); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRippedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Track); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rip); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRippedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetMissingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cdprocessor_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cdprocessor_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cdprocessor_proto_goTypes,
		DependencyIndexes: file_cdprocessor_proto_depIdxs,
		EnumInfos:         file_cdprocessor_proto_enumTypes,
		MessageInfos:      file_cdprocessor_proto_msgTypes,
	}.Build()
	File_cdprocessor_proto = out.File
	file_cdprocessor_proto_rawDesc = nil
	file_cdprocessor_proto_goTypes = nil
	file_cdprocessor_proto_depIdxs = nil
}
